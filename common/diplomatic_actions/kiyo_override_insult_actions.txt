# Variables:
#  is_listed, boolean, decides if this diplomactic action type is listed in diplomatic view.
#  prerequisites, list, the technologies required to enable the player to send this diplomatic action.
#  requires_actor_peace, boolean, false by default, will require the actor to be at peace for this action to pass the possible check.
#  requires_alliance_vote, boolean, false by default, will require the alliance of the actor to vote for this action before passing it on to the recipient.
#  requires_actor_independence, boolean, true by default, will require the actor to be independent.
#  requires_recipient_independence, boolean, true by default, will require the recipient to be independent.
#  requires_actor_federation_leader, boolean, false by default, if the actor is in a federation, he has to be the leader of it.
#  requires_recipient_federation_leader, boolean, true by default, if the recipient is in a federation, he has to be the leader of it.
#  show_decline_to_alliance_members, boolean, false by default, will show your alliance members when you decline a proposal of this type.
#  should_show_accept_message, decides whether actor gets a response on acceptance (otherwise just on decline)
#  should_show_auto_accept_message_recipient, boolean, decides if the recipient gets a message showing the diplomatic action.
#  should_open_auto_accept_message_recipient, boolean, decides if the recipient automatically opens this message.
#  should_show_auto_accept_message_actor, boolean, decides if the actor gets a reply showing the diplomatic action.
#  should_notify_all_communications, boolean, decides if a message notification is sent to all countries who have communications with actor or recipient
#  AI_acceptance_base_value, default = 0
#  potential, trigger, root is actor, from is recipient, decides if the action is shown
#  possible, trigger, root is actor, from is recipient, decides if the action is still possible
#  proposable, trigger, root is actor, from is recipient, decides if the action is proposable

# Send an insult. Harms relations.
# Overridden to "spy on this empire"
action_insult = {
	requires_recipient_independence = no
	requires_actor_independence = no
	auto_accepted = yes
	#REMOVED TO PREVENT SHOWING THAT YOU WANT TO SPY ON SOMEONE
	#should_show_auto_accept_message_recipient = yes
	
	potential = {
		hidden_trigger = {
			has_global_flag = galactic_market_founded
			from = {
				is_country_type = default
				NOR = {
					reverse_has_relation_flag = { who = root flag = kiyo_spy_spy1 }
					reverse_has_relation_flag = { who = root flag = kiyo_spy_spy2 }
					reverse_has_relation_flag = { who = root flag = kiyo_spy_spy3 }
					reverse_has_relation_flag = { who = root flag = kiyo_spy_spy4 }
					reverse_has_relation_flag = { who = root flag = kiyo_spy_nospy }
				}
			}
		}
	}
	
	possible = {		
		custom_tooltip = {
			check_variable = { which = spy_available value > 0 }
			fail_text = "kiyo_spy_no_more_spies_available"
		}
		custom_tooltip = {
			kiyo_spy_disabled_espionage = no
			fail_text = "kiyo_spy_total_war_cb"
		}
	}
	
	on_accept = {
		hidden_effect = {
			if = {
				limit = { NOT = { any_country = { reverse_has_relation_flag = { who = root flag = kiyo_spy_spy1 } } } }
				set_relation_flag = { who = from flag = kiyo_spy_spy1 }
			}
			else_if = {
				limit = { NOT = { any_country = { reverse_has_relation_flag = { who = root flag = kiyo_spy_spy2 } } } }
				set_relation_flag = { who = from flag = kiyo_spy_spy2 }
			}
			else_if = {
				limit = { NOT = { any_country = { reverse_has_relation_flag = { who = root flag = kiyo_spy_spy3 } } } }
				set_relation_flag = { who = from flag = kiyo_spy_spy3 }
			}
			else_if = {
				limit = { NOT = { any_country = { reverse_has_relation_flag = { who = root flag = kiyo_spy_spy4 } } } }
				set_relation_flag = { who = from flag = kiyo_spy_spy4 }
			}
			kiyo_spy_calculate_spy = yes
		}
	}
}